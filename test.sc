import utils.Utils
import scala.util.parsing.json.JSON


object test {
    
    
    
    val appAbsolutePath = "C:/Users/evgeniyshatokhin/Desktop/GitHub/hello_rpg/app"
                                                  //> appAbsolutePath  : String = C:/Users/evgeniyshatokhin/Desktop/GitHub/hello_r
                                                  //| pg/app
    
        val sceneFileName = "scene.json"          //> sceneFileName  : String = scene.json
    val sceneFilePath = appAbsolutePath + "/assets/javascripts/scenes/" + sceneFileName;
                                                  //> sceneFilePath  : String = C:/Users/evgeniyshatokhin/Desktop/GitHub/hello_rpg
                                                  //| /app/assets/javascripts/scenes/scene.json
    val sceneJson = scala.io.Source.fromFile(sceneFilePath).getLines.mkString
                                                  //> sceneJson  : String = {"scene": [ [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], [1,2,1,
                                                  //| 1,1,1,1,1,1,1,1,1,1,1,1,1], [1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1], [1,2,2,1,1,1,
                                                  //| 1,1,1,1,1,1,1,1,1,1], [1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1], [1,1,2,2,2,2,1,1,3,
                                                  //| 3,3,3,1,1,1,1], [1,1,1,2,2,1,1,3,2,3,2,3,3,1,1,1], [1,1,1,1,1,1,1,3,2,2,2,2,
                                                  //| 3,1,1,1], [1,1,1,1,1,1,1,1,3,3,3,3,1,1,1,1], [1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,
                                                  //| 1], [1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1], [1,1,1,1,1,2,1,2,2,3,4,3,2,1,2,1], [1
                                                  //| ,1,1,1,1,2,1,2,2,3,4,3,2,1,2,1], [1,1,1,1,1,2,1,2,2,3,3,3,2,1,2,1], [1,1,1,1
                                                  //| ,1,2,1,2,2,2,2,2,2,1,2,1], [1,1,1,1,2,2,1,2,2,2,2,2,2,1,2,2], [1,1,1,1,1,1,1
                                                  //| ,1,2,1,1,2,1,1,1,1], [1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1], [1,1,1,1,1,1,1,1,2,1
                                                  //| ,1,2,1,1,1,1], [1,1,1,1,1,1,1,2,2,1,1,2,2,1,1,1], [1,1,1,1,1,1,1,2,2,1,1,2,2
                                                  //| ,1,1,1], [1,1,1,1,1,1,1,2,2,1,1,2,2,1,1,1], [1,1,1,1,1,1,1,2,2,1,1,2,2,1,1,1
                                                  //| ], [1,1,1,1,1,1,1,2,2,1,1,2,2,1,1,1]],"transitions": ["scene-10.json", "scen
                                                  //| e10.json", "scene0-1.jso
                                                  //| Output exceeds cutoff limit.
     
       val scene1 = JSON.parseFull(sceneJson).get //> scene1  : Any = Map(scene -> List(List(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 2.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 2.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 2.
                                                  //| 0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), Li
                                                  //| st(1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0), List(1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 3.0, 3.0, 3.0, 3.0, 1.0
                                                  //| , 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 3.0, 2.0, 3.0, 2.0
                                                  //| , 3.0, 3.0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 2.0
                                                  //| , 2.0, 2.0, 2.0, 3.0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0, 3.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0
                                                  //| , 1.0, 1.0, 1.0, 2.0, 2.
                                                  //| Output exceeds cutoff limit.
       
    
    val scene = JSON.parseFull(sceneJson).get.asInstanceOf[Map[String,List[List[Double]]]].get("scene").get
                                                  //> scene  : List[List[Double]] = List(List(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1
                                                  //| .0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 2.0, 1.0, 1.0, 1.0, 1
                                                  //| .0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 2.0, 1.0, 1
                                                  //| .0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 2
                                                  //| .0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), L
                                                  //| ist(1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0), List(1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 3.0, 3.0, 3.0, 3.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 3.0, 2.0, 3.0, 2.
                                                  //| 0, 3.0, 3.0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 2.
                                                  //| 0, 2.0, 2.0, 2.0, 3.0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 3.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0), List(1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 2.0, 2
                                                  //| Output exceeds cutoff limit.
                                         
    val scene2 = JSON.parseFull(sceneJson).get.asInstanceOf[Map[String,List[String]]].get("transitions").get
                                                  //> scene2  : List[String] = List(scene-10.json, scene10.json, scene0-1.json, sc
                                                  //| ene01.json)
    
    val b:Double = 1.0                            //> b  : Double = 1.0
    val c = b.toInt                               //> c  : Int = 1
    
    val a = scene.head.head.toInt                 //> a  : Int = 1
    
      
    
    Utils.loadWorld(appAbsolutePath)              //> res0: Map[String,actors.Scene] = Map(scene0-1.json -> Scene(C:/Users/evgeniy
                                                  //| shatokhin/Desktop/GitHub/hello_rpg/app/assets/javascripts/scenes/scene0-1.js
                                                  //| on,List(List(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), List(0, 0, 0, 
                                                  //| 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), List(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                                                  //| , 0, 0, 0, 0, 0), List(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), List
                                                  //| (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), List(0, 0, 0, 0, 0, 0, 0, 
                                                  //| 0, 3, 3, 3, 3, 0, 0, 0, 0), List(0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 3, 0, 0
                                                  //| , 0), List(0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0), List(0, 0, 0, 0,
                                                  //|  0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0), List(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                                                  //| 0, 0, 0, 0, 0), List(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), List(0
                                                  //| , 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 3, 0, 0, 0, 0), List(0, 0, 0, 0, 0, 0, 0, 0,
                                                  //|  0, 3, 4, 3, 0, 0, 0, 0), List(0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 
                                                  //| 0), List(0, 0, 0, 0, 0, 
                                                  //| Output exceeds cutoff limit.
  
}